python:
  - "2.7"
matrix:
  include:
      - name: macOS x64 (Debug + Release)
        language: cpp
        env: 
          - PLATARG=osx 
          - LIB_ARGS_DEBUG="platform=osx target=debug wwise_sdk=../wwisesdk/2019.2.1.7250/"
          - LIB_ARGS_RELEASE="platform=osx target=release wwise_sdk=../wwisesdk/2019.2.1.7250/"
        os: osx
        osx_image: xcode12
        compiler: clang
        addons:
          homebrew:
            packages:
              - scons
              - p7zip
            update: false
      - name: iOS arm64 + armv7 (Debug + Release)
        language: cpp
        env: 
          - PLATARG=ios 
          - LIB_ARGS_ARM64_DEBUG="platform=ios ios_arch=arm64 target=debug wwise_sdk=../wwisesdk/2019.2.1.7250" 
          - LIB_ARGS_ARMV7_DEBUG="platform=ios ios_arch=armv7 target=debug wwise_sdk=../wwisesdk/2019.2.1.7250"
          - LIB_ARGS_ARM64_RELEASE="platform=ios ios_arch=arm64 target=release wwise_sdk=../wwisesdk/2019.2.1.7250" 
          - LIB_ARGS_ARMV7_RELEASE="platform=ios ios_arch=armv7 target=release wwise_sdk=../wwisesdk/2019.2.1.7250"
        os: osx
        osx_image: xcode12
        compiler: clang
        addons:
          homebrew:
            packages:
              - scons
              - p7zip
            update: false
      - name: Linux x64 (Debug + Release)
        language: cpp
        os: linux
        dist: bionic
        addons:
          apt:
            sources:
              - ubuntu-toolchain-r-test
            packages:
              - g++-9
        env:
          - MATRIX_EVAL="CC=gcc-9 && CXX=g++-9"
          - PLATARG=linux 
          - LIB_ARGS_DEBUG="platform=linux target=debug wwise_sdk='/home/travis/build/alessandrofama/wwise-godot-integration/wwisesdk/2019.2.1.7250'"
          - LIB_ARGS_RELEASE="platform=linux target=release wwise_sdk='/home/travis/build/alessandrofama/wwise-godot-integration/wwisesdk/2019.2.1.7250'"
      - name: Windows x64 (Debug + Release)
        language: cpp
        env: PLATARG=windows
        os: windows
        compiler: clang
      - name: Android arm64-v8a + armv7-a (Debug + Release)
        language: android
        env: 
          - PLATARG=android 
          - LIB_ARGS_ARM64V8_DEBUG="NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.mk PM5_CONFIG=debug_android_arm64-v8a NDK_LIBS_OUT=./gdnative-demo/wwise/bin/android/debug WWISESDK=../wwisesdk/2019.2.1.7250" 
          - LIB_ARGS_ARMV7_DEBUG="NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.mk PM5_CONFIG=debug_android_armeabi-v7a NDK_LIBS_OUT=./gdnative-demo/wwise/bin/android/debug WWISESDK=../wwisesdk/2019.2.1.7250"
          - LIB_ARGS_ARM64V8_RELEASE="NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.mk PM5_CONFIG=release_android_arm64-v8a NDK_LIBS_OUT=./gdnative-demo/wwise/bin/android/release WWISESDK=../wwisesdk/2019.2.1.7250" 
          - LIB_ARGS_ARMV7_RELEASE="NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=Android.mk PM5_CONFIG=release_android_armeabi-v7a NDK_LIBS_OUT=./gdnative-demo/wwise/bin/android/release WWISESDK=../wwisesdk/2019.2.1.7250"
        os: linux
        android:
          components:
            - tools
            - platform-tools
            - tools
            - build-tools-26.0.0
            - android-26
          licenses:
            - '.+'
      - name: Integration App macOS
        env: 
          - PLATARG=app-osx
          - BUILD=app
        os: osx
        osx_image: xcode12
        addons:
          homebrew:
            packages:
              - node
              - yarn
              - p7zip
            update: false
      - name: Integration App Windows
        language: node_js
        node_js:
          - lts/*
        env: 
          - PLATARG=app-win
          - BUILD=app
        os: windows
git:
  depth: false
before_install:
  - if [[ "$PLATARG" == "windows" ]]; then wget -O scons.zip http://prdownloads.sourceforge.net/scons/scons-local-3.0.5.zip && mv scons.zip C:/scons.zip && 7z x C:/scons.zip -oC:/scons; fi
  - if [[ "$PLATARG" == "osx" ]]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install p7zip scons; fi
  - if [[ "$PLATARG" == "android" ]]; then sudo apt-get install p7zip p7zip-full p7zip-rar; fi
  - if [[ "$PLATARG" == "linux" ]]; then sudo apt-get install p7zip p7zip-full p7zip-rar scons; fi
  - if [[ "$BUILD" != "app" ]]; then mkdir wwisesdk && cd wwisesdk; fi
  - if [[ "$BUILD" != "app" ]]; then wget https://www.dropbox.com/s/3rvi7td841fk2p8/2019.2.1.7250.zip; fi
  - if [[ "$BUILD" != "app" ]]; then 7z x 2019.2.1.7250.zip -aoa; fi
  - if [[ "$BUILD" != "app" ]]; then cd ../; fi
  - if [[ "$BUILD" != "app" ]]; then cd godot-cpp; fi
  - if [[ "$BUILD" != "app" ]]; then mkdir bin && cd bin; fi
  - if [[ "$BUILD" != "app" ]]; then wget https://www.dropbox.com/s/tbyg9uz3ykfmcg2/headers.zip && 7z x headers.zip -aoa; fi
  - if [[ "$BUILD" != "app" ]]; then cd ../include/gen/; fi
  - if [[ "$BUILD" != "app" ]]; then wget https://www.dropbox.com/s/lw08yw81ge22del/gen.zip && 7z x gen.zip -aoa; fi
  - if [[ "$BUILD" != "app" ]]; then cd ../../src/gen/; fi
  - if [[ "$BUILD" != "app" ]]; then wget https://www.dropbox.com/s/23gw1ena812zb2v/srcgen.zip && 7z x srcgen.zip -aoa; fi
  - if [[ "$BUILD" != "app" ]]; then cd ../../../wwise-gdnative; fi
  - if [[ "$PLATARG" == "windows" ]]; then wget https://gist.githubusercontent.com/alessandrofama/41d1c775cc6fe113002002c99a41b6fd/raw/eae5087eb9ef2f5aa820a49d689bb775f855bbf5/compile_cl_wwise_debug.bat; fi
  - if [[ "$PLATARG" == "windows" ]]; then wget https://gist.githubusercontent.com/alessandrofama/e209a9327328a5de0a2286cb14bd315c/raw/400425a2071c1dbe51e0d716ec0cd678ed1b8b37/compile_cl_wwise_release.bat; fi
  - if [[ "$PLATARG" == "windows" ]]; then wget https://gist.githubusercontent.com/alessandrofama/167b68b51ad23e8627bb278a8f7a6ee9/raw/a27500ac8c2d1400a853d06f0a9ce1d02ed1d7b2/compile_cl_waapi_debug.bat && cp compile_cl_waapi_debug.bat ../waapiclient-gdnative; fi
  - if [[ "$PLATARG" == "windows" ]]; then wget https://gist.githubusercontent.com/alessandrofama/07563fdd14878342a2ec9f4621fe6800/raw/bdffef062e8904b10d83fa299d436f58625555f4/compile_cl_waapi_release.bat && cp compile_cl_waapi_release.bat ../waapiclient-gdnative; fi
  - if [[ "$BUILD" == "app" ]]; then cd integration-app; fi
install:
  - if [[ "$PLATARG" == "android" ]]; then echo y | sdkmanager "ndk-bundle" > /dev/null; fi
  - if [[ "$PLATARG" == "android" ]]; then echo y | sdkmanager "ndk;21.2.6472646" > /dev/null; fi
  - if [[ "$PLATARG" == "android" ]]; then echo y | sdkmanager --channel=3 --channel=1 "cmake;3.10.2.4988404" > /dev/null; fi
  - if [[ "$PLATARG" == "android" ]]; then export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk-bundle; fi
  - if [[ "$PLATARG" == "android" ]]; then export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT; fi
  - if [[ "$PLATARG" == "android" ]]; then $ANDROID_NDK_ROOT/ndk-build $LIB_ARGS_ARM64V8_DEBUG -j2 && $ANDROID_NDK_ROOT/ndk-build $LIB_ARGS_ARMV7_DEBUG -j2 && $ANDROID_NDK_ROOT/ndk-build $LIB_ARGS_ARM64V8_RELEASE -j2 && $ANDROID_NDK_ROOT/ndk-build $LIB_ARGS_ARMV7_RELEASE -j2; fi
  - if [[ "$PLATARG" == "android" ]]; then echo "Android builds completed."; fi
  - if [[ "$PLATARG" == "android" ]]; then cd ../; fi
  - if [[ "$PLATARG" == "osx" ]]; then scons $LIB_ARGS_DEBUG && scons $LIB_ARGS_RELEASE && cd ../waapiclient-gdnative; fi
  - if [[ "$PLATARG" == "osx" ]]; then scons $LIB_ARGS_DEBUG target_path="../wwise-gdnative/gdnative-demo/wwise/bin/" && scons $LIB_ARGS_RELEASE target_path="../wwise-gdnative/gdnative-demo/wwise/bin/" && cd ../; fi
  - if [[ "$PLATARG" == "linux" ]]; then scons $LIB_ARGS_DEBUG && scons $LIB_ARGS_RELEASE && cd ../; fi
  - if [[ "$PLATARG" == "ios" ]]; then scons $LIB_ARGS_ARM64_DEBUG && scons $LIB_ARGS_ARMV7_DEBUG && scons $LIB_ARGS_ARM64_RELEASE && scons $LIB_ARGS_ARMV7_RELEASE && cd ../; fi
  - if [[ "$PLATARG" == "app-osx" ]]; then yarn install; fi
  - if [[ "$PLATARG" == "app-win" ]]; then npm install; fi
script:
  - if [[ "$PLATARG" == "windows" ]]; then ./compile_cl_wwise_debug.bat && ./compile_cl_wwise_release.bat && cd ../waapiclient-gdnative && ./compile_cl_waapi_debug.bat && ./compile_cl_waapi_release.bat && cd ../; fi
  - if [[ "$PLATARG" == "app-osx" ]]; then yarn electron:build; fi
  - if [[ "$PLATARG" == "app-win" ]]; then npm run electron:build; fi
  - echo "Build completed"
before_deploy:
  - if [[ "$PLATARG" == "windows" ]]; then cd wwise-gdnative/gdnative-demo/wwise/bin/ && 7z a Win64.zip win64/; fi
  - if [[ "$PLATARG" == "osx" ]]; then cp waapiclient-gdnative/gdnative-demo/wwise/bin/waapi-gdnative-debug.gdnlib wwise-gdnative/gdnative-demo/wwise/bin && cp waapiclient-gdnative/gdnative-demo/wwise/bin/waapi-gdnative-debug.gdns wwise-gdnative/gdnative-demo/wwise/bin && cp waapiclient-gdnative/gdnative-demo/wwise/bin/waapi-gdnative-release.gdnlib wwise-gdnative/gdnative-demo/wwise/bin && cp waapiclient-gdnative/gdnative-demo/wwise/bin/waapi-gdnative-release.gdns wwise-gdnative/gdnative-demo/wwise/bin && cp -R waapiclient-gdnative/gdnative-demo/addons/waapi_picker wwise-gdnative/gdnative-demo/addons; fi
  - if [[ "$PLATARG" == "osx" ]]; then cd wwise-gdnative/gdnative-demo/wwise/bin/ && 7z a macOS.zip osx/ && cd ../../../../ && mv wwise-gdnative/gdnative-demo/wwise/bin/macOS.zip ./macOS.zip && cd wwise-gdnative/gdnative-demo/; fi
  - if [[ "$PLATARG" == "osx" ]]; then rm -rf meshes scripts demo-scenes test addons/gut .import wwise/resources wwise/GeneratedSoundBanks/Android wwise/GeneratedSoundBanks/iOS wwise/GeneratedSoundBanks/Linux wwise/GeneratedSoundBanks/Mac wwise/GeneratedSoundBanks/Windows wwise/bin/android wwise/bin/iOS wwise/bin/osx wwise/bin/win64 && mkdir wwise/GeneratedSoundBanks/Android wwise/GeneratedSoundBanks/iOS wwise/GeneratedSoundBanks/Linux wwise/GeneratedSoundBanks/Mac wwise/GeneratedSoundBanks/Windows && rm -f .gitignore .gutconfig.json default_env.tres project.godot export_presets.cfg icon.png icon.png.import wwise/GeneratedSoundBanks/Wwise_IDs.h wwise/GeneratedSoundBanks/wwise_ids.gd && mv wwise/GeneratedSoundBanks/wwise_ids.backup wwise/GeneratedSoundBanks/wwise_ids.gd && find . -name '.import' -type f -delete; fi
  - if [[ "$PLATARG" == "osx" ]]; then 7z a -r ../../Integration.zip * && cd ../../; fi
  - if [[ "$PLATARG" == "ios" ]]; then cd wwise-gdnative/gdnative-demo/wwise/bin/ && 7z a iOS.zip iOS/; fi
  - if [[ "$PLATARG" == "linux" ]]; then cd wwise-gdnative/gdnative-demo/wwise/bin/ && 7z a Linux.zip linux/; fi
  - if [[ "$PLATARG" == "android" ]]; then cd wwise-gdnative/gdnative-demo/wwise/bin/ && 7z a Android.zip android/; fi
  - if [[ "$BUILD" == "app" ]]; then cd dist_electron; fi
    # Set up git user name and tag this commit
  - git config --local user.name "alessandrofama"
  - git config --local user.email "alessandro.fama@ymail.com"
  - export TRAVIS_TAG=${TRAVIS_TAG:-$(git log -1 --pretty=format:%ct)}
  - git tag -f $TRAVIS_TAG
deploy:
  provider: releases
  api_key: $GITHUB_TOKEN
  file:
    - "Win64.zip"
    - "macOS.zip"
    - "iOS.zip"
    - "Linux.zip"
    - "Android.zip"
    - "Wwise Godot Integration App.dmg"
    - "Wwise Godot Integration App.exe"
    - "Integration.zip"
  skip_cleanup: true
  draft: true
  on:
    repo: alessandrofama/wwise-godot-integration