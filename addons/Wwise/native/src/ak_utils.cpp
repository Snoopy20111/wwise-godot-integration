#include "ak_utils.h"

using namespace godot;

AkUtils* AkUtils::singleton = nullptr;

void AkUtils::_bind_methods()
{
	BIND_ENUM_CONSTANT(GAMEEVENT_NONE);
	BIND_ENUM_CONSTANT(GAMEEVENT_ENTER_TREE);
	BIND_ENUM_CONSTANT(GAMEEVENT_READY);
	BIND_ENUM_CONSTANT(GAMEEVENT_EXIT_TREE);

	BIND_ENUM_CONSTANT(AKTYPE_EVENT);
	BIND_ENUM_CONSTANT(AKTYPE_BANK);
	BIND_ENUM_CONSTANT(AKTYPE_RTPC);
	BIND_ENUM_CONSTANT(AKTYPE_STATE_GROUP);
	BIND_ENUM_CONSTANT(AKTYPE_STATE);
	BIND_ENUM_CONSTANT(AKTYPE_SWITCH_GROUP);
	BIND_ENUM_CONSTANT(AKTYPE_SWITCH);
	BIND_ENUM_CONSTANT(AKTYPE_BUS);
	BIND_ENUM_CONSTANT(AKTYPE_AUX_BUS);

	BIND_ENUM_CONSTANT(AK_CURVE_LOG3);
	BIND_ENUM_CONSTANT(AK_CURVE_SINE);
	BIND_ENUM_CONSTANT(AK_CURVE_LOG1);
	BIND_ENUM_CONSTANT(AK_CURVE_INVSCURVE);
	BIND_ENUM_CONSTANT(AK_CURVE_LINEAR);
	BIND_ENUM_CONSTANT(AK_CURVE_SCURVE);
	BIND_ENUM_CONSTANT(AK_CURVE_EXP1);
	BIND_ENUM_CONSTANT(AK_CURVE_SINERECIP);
	BIND_ENUM_CONSTANT(AK_CURVE_EXP3);
	BIND_ENUM_CONSTANT(AK_CURVE_LASTFADECURVE);
	BIND_ENUM_CONSTANT(AK_CURVE_CONSTANT);

	BIND_ENUM_CONSTANT(AK_END_OF_EVENT);
	BIND_ENUM_CONSTANT(AK_END_OF_DYNAMIC_SEQUENCE_ITEM);
	BIND_ENUM_CONSTANT(AK_MARKER);
	BIND_ENUM_CONSTANT(AK_DURATION);
	BIND_ENUM_CONSTANT(AK_SPEAKER_VOLUME_MATRIX);
	BIND_ENUM_CONSTANT(AK_STARVATION);
	BIND_ENUM_CONSTANT(AK_MUSIC_PLAYLIST_SELECT);
	BIND_ENUM_CONSTANT(AK_MUSIC_PLAY_STARTED);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_BEAT);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_BAR);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_ENTRY);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_EXIT);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_GRID);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_USER_CUE);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_POINT);
	BIND_ENUM_CONSTANT(AK_MUSIC_SYNC_ALL);
	BIND_ENUM_CONSTANT(AK_MIDI_EVENT);
	BIND_ENUM_CONSTANT(AK_CALLBACK_BITS);
	BIND_ENUM_CONSTANT(AK_ENABLE_GET_SOURCE_PLAY_POSITION);
	BIND_ENUM_CONSTANT(AK_ENABLE_GET_MUSIC_PLAY_POSITION);
	BIND_ENUM_CONSTANT(AK_ENABLE_GET_SOURCE_STREAM_BUFFERING);
}

AkUtils::AkUtils()
{
	ERR_FAIL_COND(singleton != nullptr);
	singleton = this;
}

AkUtils::~AkUtils()
{
	ERR_FAIL_COND(singleton != this);
	singleton = nullptr;
}

AkUtils* AkUtils::get_singleton() { return singleton; }